package it.unica.co2.site.onlinestore;


import static it.unica.co2.api.contract.utils.ContractFactory.*;
import it.unica.co2.api.contract.ContractDefinition;
import it.unica.co2.api.contract.Recursion;
import it.unica.co2.api.contract.SessionType;
import it.unica.co2.api.contract.Sort;
import it.unica.co2.api.process.CO2Process;
import it.unica.co2.api.process.Participant;
import it.unica.co2.honesty.HonestyChecker;
import co2api.ContractException;
import co2api.ContractExpiredException;
import co2api.Message;
import co2api.Public;
import co2api.Session;
import co2api.SessionI;
import co2api.TimeExpiredException;

/*
 * auto-generated by co2-plugin
 * creation date: 02-12-2016 15:33:55
 */
@SuppressWarnings("unused")
public class Main {
	
	private static final String username = "eclipse@co2.unica.it";
	private static final String password = "eclipse";
	
	
	/*
	 * contracts declaration
	 */
	static final ContractDefinition C = def("C");
	static final ContractDefinition Cadd = def("Cadd");
	static final ContractDefinition Cpay = def("Cpay");
	
	/*
	 * contracts initialization
	 */
	static {
		C.setContract(externalSum().add("addToCart", Sort.integer(), ref(Cadd)));
		Cadd.setContract(externalSum().add("addToCart", Sort.integer(), ref(Cadd)).add("checkout", Sort.unit(), ref(Cpay)));
		Cpay.setContract(externalSum().add("pay", Sort.string(), internalSum().add("ok", Sort.unit()).add("no", Sort.unit(), ref(Cpay)).add("abort", Sort.unit())).add("cancel", Sort.unit()));
	}
	
	
	public static class Store extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public Store(String username, String password) {
			super(username, password);
		}
		
		@Override
		public void run() {
			Session<SessionType> x = tellAndWait(Main.C);
			
			logger.info("waiting on 'x' for actions [addToCart]");
			Message msg = x.waitForReceive("addToCart"); 
			
			logger.info("received [addToCart]");
			Integer n;
			try {
				n = Integer.parseInt(msg.getStringValue());
			}
			catch (NumberFormatException e) {
				throw new RuntimeException(e);
			}
			processCall(Padd.class, username, password ,x, n); 
		}
	}
	
	public static class Padd extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private Integer total;
		
		public Padd(String username, String password, SessionI<SessionType> x, Integer total) {
			super(username, password);
			this.x=x;
			this.total=total;
		}
		
		@Override
		public void run() {
			logger.info("waiting on 'x' for actions [addToCart, checkout]");
			Message msg = x.waitForReceive("addToCart", "checkout"); 
			
			switch (msg.getLabel()) {
				case "addToCart":
					logger.info("received ["+msg.getLabel()+"]");
					Integer n;
					try {
						n = Integer.parseInt(msg.getStringValue());
					}
					catch (NumberFormatException e) {
						throw new RuntimeException(e);
					}
					processCall(Padd.class, username, password ,x, (total+n)); 
					break;
				case "checkout":
					logger.info("received ["+msg.getLabel()+"]");
					processCall(Ppay.class, username, password ,x, total); 
					break;
			}
		}
	}
	
	public static class Ppay extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private Integer amount;
		
		public Ppay(String username, String password, SessionI<SessionType> x, Integer amount) {
			super(username, password);
			this.x=x;
			this.amount=amount;
		}
		
		@Override
		public void run() {
			logger.info("waiting on 'x' for actions [pay, cancel]");
			Message msg = x.waitForReceive("pay", "cancel"); 
			
			switch (msg.getLabel()) {
				case "pay":
					logger.info("received ["+msg.getLabel()+"]");
					String s;
					s = msg.getStringValue();
					processCall(Pack.class, username, password ,x, amount); 
					break;
				case "cancel":
					logger.info("received ["+msg.getLabel()+"]");
					break;
			}
		}
	}
	
	public static class Pack extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private Integer amount;
		
		public Pack(String username, String password, SessionI<SessionType> x, Integer amount) {
			super(username, password);
			this.x=x;
			this.amount=amount;
		}
		
		@Override
		public void run() {
			if ((amount<100)) { 
				logger.info("sending action 'ok'");
				x.sendIfAllowed("ok"); 
			}
			else {
				logger.info("sending action 'no'");
				x.sendIfAllowed("no"); 
				
				processCall(Ppay.class, username, password ,x, amount); 
			}
		}
	}
	
	public static void main(String[] args) {
		HonestyChecker.isHonest(Store.class, Main.username, Main.password);
		//new Thread(new Store(Main.username, Main.password)).start();
	}
}
