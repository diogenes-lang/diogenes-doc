package it.unica.co2.site.travelagency;


import static it.unica.co2.api.contract.utils.ContractFactory.*;
import it.unica.co2.api.contract.ContractDefinition;
import it.unica.co2.api.contract.Recursion;
import it.unica.co2.api.contract.SessionType;
import it.unica.co2.api.contract.Sort;
import it.unica.co2.api.process.CO2Process;
import it.unica.co2.api.process.Participant;
import it.unica.co2.honesty.HonestyChecker;
import co2api.ContractException;
import co2api.ContractExpiredException;
import co2api.Message;
import co2api.Public;
import co2api.Session;
import co2api.SessionI;
import co2api.TimeExpiredException;

/*
 * auto-generated by co2-plugin
 * creation date: 02-12-2016 15:21:15
 */
@SuppressWarnings("unused")
public class Main {
	
	private static final String username = "eclipse@co2.unica.it";
	private static final String password = "eclipse";
	
	static final Integer intPlaceholder = 42;
	
	
	/*
	 * contracts declaration
	 */
	static final ContractDefinition Cu = def("Cu");
	static final ContractDefinition Cf = def("Cf");
	static final ContractDefinition Ch = def("Ch");
	static final ContractDefinition D = def("D");
	
	/*
	 * contracts initialization
	 */
	static {
		Cu.setContract(externalSum().add("tripDets", Sort.string(), externalSum().add("budget", Sort.integer(), internalSum().add("quote", Sort.integer(), externalSum().add("pay", Sort.unit(), internalSum().add("commit", Sort.unit()).add("abort", Sort.unit()))).add("abort", Sort.unit()))));
		Cf.setContract(internalSum().add("flightDets", Sort.string(), ref(D)));
		Ch.setContract(internalSum().add("hotelDets", Sort.string(), ref(D)));
		D.setContract(externalSum().add("quote", Sort.integer(), internalSum().add("pay", Sort.unit(), externalSum().add("confirm", Sort.unit(), internalSum().add("commit", Sort.unit()).add("abort", Sort.unit()))).add("abort", Sort.unit())));
	}
	
	
	public static class P extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public P(String username, String password) {
			super(username, password);
		}
		
		@Override
		public void run() {
			Session<SessionType> xu = tellAndWait(Main.Cu);
			
			logger.info("waiting on 'xu' for actions [tripDets]");
			Message msg = xu.waitForReceive("tripDets"); 
			
			logger.info("received [tripDets]");
			String yt;
			yt = msg.getStringValue();
			logger.info("waiting on 'xu' for actions [budget]");
			Message msg1 = xu.waitForReceive("budget"); 
			
			logger.info("received [budget]");
			Integer bud;
			try {
				bud = Integer.parseInt(msg1.getStringValue());
			}
			catch (NumberFormatException e) {
				throw new RuntimeException(e);
			}
			processCall(P1.class, username, password ,xu, yt, bud); 
		}
	}
	
	public static class P1 extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> xu;
		private String yt;
		private Integer bud;
		
		public P1(String username, String password, SessionI<SessionType> xu, String yt, Integer bud) {
			super(username, password);
			this.xu=xu;
			this.yt=yt;
			this.bud=bud;
		}
		
		@Override
		public void run() {
			Public<SessionType> xf = tell(Main.Cf);
			
			Public<SessionType> xh = tell(Main.Ch);
			
			
			parallel(()->{
				logger.info("sending action 'flightDets'");
				xf.sendIfAllowed("flightDets", yt); 
			});
			
			parallel(()->{
				logger.info("sending action 'hotelDets'");
				xh.sendIfAllowed("hotelDets", yt); 
			});
			
			parallel(()->{
				processCall(Pquote.class, username, password ,xu, xf, xh, bud); 
			});
		}
	}
	
	public static class Pquote extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> xu;
		private SessionI<SessionType> xf;
		private SessionI<SessionType> xh;
		private Integer bud;
		
		public Pquote(String username, String password, SessionI<SessionType> xu, SessionI<SessionType> xf, SessionI<SessionType> xh, Integer bud) {
			super(username, password);
			this.xu=xu;
			this.xf=xf;
			this.xh=xh;
			this.bud=bud;
		}
		
		@Override
		public void run() {
			try {
				multipleSessionReceiver()
					.add(
						xf, 
						(msg) -> {
							Integer n;
							try {
								n = Integer.parseInt(msg.getStringValue());
							}
							catch (NumberFormatException e) {
								throw new RuntimeException(e);
							}
							processCall(Pquote1.class, username, password ,xu, xf, xh, n, bud); 
						}, 
						"quote"
					)
					.add(
						xh, 
						(msg) -> {
							Integer n1;
							try {
								n1 = Integer.parseInt(msg.getStringValue());
							}
							catch (NumberFormatException e1) {
								throw new RuntimeException(e1);
							}
							processCall(Pquote1.class, username, password ,xu, xh, xf, n1, bud); 
						}, 
						"quote"
					)
					.waitForReceive(Main.intPlaceholder*1000) 
				;
			}
			catch (TimeExpiredException e2) {
				processCall(Pabort.class, username, password ,xu, xh, xf); 
			}
			
		}
	}
	
	public static class Pquote1 extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private SessionI<SessionType> x1;
		private SessionI<SessionType> x2;
		private Integer quote;
		private Integer budget;
		
		public Pquote1(String username, String password, SessionI<SessionType> x, SessionI<SessionType> x1, SessionI<SessionType> x2, Integer quote, Integer budget) {
			super(username, password);
			this.x=x;
			this.x1=x1;
			this.x2=x2;
			this.quote=quote;
			this.budget=budget;
		}
		
		@Override
		public void run() {
			if ((quote<budget)) { 
				processCall(Pquote2.class, username, password ,x, x1, x2, quote, budget); 
			}
			else {
				processCall(Pabort.class, username, password ,x, x1, x2); 
			}
		}
	}
	
	public static class Pquote2 extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private SessionI<SessionType> x1;
		private SessionI<SessionType> x2;
		private Integer quote;
		private Integer budget;
		
		public Pquote2(String username, String password, SessionI<SessionType> x, SessionI<SessionType> x1, SessionI<SessionType> x2, Integer quote, Integer budget) {
			super(username, password);
			this.x=x;
			this.x1=x1;
			this.x2=x2;
			this.quote=quote;
			this.budget=budget;
		}
		
		@Override
		public void run() {
			try {
				logger.info("waiting on 'x2' for actions [quote]");
				Message msg = x2.waitForReceive(Main.intPlaceholder*1000, "quote"); //TODO: remove the placeholder/s
				
				logger.info("received [quote]");
				Integer quote2;
				try {
					quote2 = Integer.parseInt(msg.getStringValue());
				}
				catch (NumberFormatException e) {
					throw new RuntimeException(e);
				}
				if (((quote+quote2)<budget)) { 
					processCall(Ppay.class, username, password ,x, x1, x2, (quote+quote2)); 
				}
				else {
					processCall(Pabort.class, username, password ,x, x1, x2); 
				}
			}
			catch (TimeExpiredException e1) {
				processCall(Pabort.class, username, password ,x, x1, x2); 
			}
			
		}
	}
	
	public static class Pabort extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private SessionI<SessionType> x1;
		private SessionI<SessionType> x2;
		
		public Pabort(String username, String password, SessionI<SessionType> x, SessionI<SessionType> x1, SessionI<SessionType> x2) {
			super(username, password);
			this.x=x;
			this.x1=x1;
			this.x2=x2;
		}
		
		@Override
		public void run() {
			
			parallel(()->{
				logger.info("sending action 'abort'");
				x.sendIfAllowed("abort"); 
			});
			
			parallel(()->{
				logger.info("sending action 'abort'");
				x1.sendIfAllowed("abort"); 
			});
			
			parallel(()->{
				logger.info("sending action 'abort'");
				x2.sendIfAllowed("abort"); 
			});
			
			parallel(()->{
				logger.info("waiting on 'x' for actions [pay]");
				Message msg = x.waitForReceive("pay"); 
				
				logger.info("received [pay]");
			});
			
			parallel(()->{
				logger.info("waiting on 'x1' for actions [quote]");
				Message msg1 = x1.waitForReceive("quote"); 
				
				logger.info("received [quote]");
				Integer n;
				try {
					n = Integer.parseInt(msg1.getStringValue());
				}
				catch (NumberFormatException e) {
					throw new RuntimeException(e);
				}
			});
			
			parallel(()->{
				logger.info("waiting on 'x2' for actions [quote]");
				Message msg2 = x2.waitForReceive("quote"); 
				
				logger.info("received [quote]");
				Integer n1;
				try {
					n1 = Integer.parseInt(msg2.getStringValue());
				}
				catch (NumberFormatException e1) {
					throw new RuntimeException(e1);
				}
			});
			
			parallel(()->{
				logger.info("waiting on 'x1' for actions [confirm]");
				Message msg3 = x1.waitForReceive("confirm"); 
				
				logger.info("received [confirm]");
			});
			
			parallel(()->{
				logger.info("waiting on 'x2' for actions [confirm]");
				Message msg4 = x2.waitForReceive("confirm"); 
				
				logger.info("received [confirm]");
			});
		}
	}
	
	public static class Ppay extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private SessionI<SessionType> x1;
		private SessionI<SessionType> x2;
		private Integer amount;
		
		public Ppay(String username, String password, SessionI<SessionType> x, SessionI<SessionType> x1, SessionI<SessionType> x2, Integer amount) {
			super(username, password);
			this.x=x;
			this.x1=x1;
			this.x2=x2;
			this.amount=amount;
		}
		
		@Override
		public void run() {
			logger.info("sending action 'quote'");
			x.sendIfAllowed("quote", amount); 
			
			try {
				logger.info("waiting on 'x' for actions [pay]");
				Message msg = x.waitForReceive(Main.intPlaceholder*1000, "pay"); //TODO: remove the placeholder/s
				
				logger.info("received [pay]");
				processCall(Pconfirm1.class, username, password ,x, x1, x2); 
			}
			catch (TimeExpiredException e) {
				processCall(Pabort.class, username, password ,x, x1, x2); 
			}
			
		}
	}
	
	public static class Pconfirm1 extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private SessionI<SessionType> x1;
		private SessionI<SessionType> x2;
		
		public Pconfirm1(String username, String password, SessionI<SessionType> x, SessionI<SessionType> x1, SessionI<SessionType> x2) {
			super(username, password);
			this.x=x;
			this.x1=x1;
			this.x2=x2;
		}
		
		@Override
		public void run() {
			logger.info("sending action 'pay'");
			x1.sendIfAllowed("pay"); 
			
			logger.info("sending action 'pay'");
			x2.sendIfAllowed("pay"); 
			
			try {
				logger.info("waiting on 'x1' for actions [confirm]");
				Message msg = x1.waitForReceive(Main.intPlaceholder*1000, "confirm"); //TODO: remove the placeholder/s
				
				logger.info("received [confirm]");
				processCall(Pconfirm2.class, username, password ,x, x1, x2); 
			}
			catch (TimeExpiredException e) {
				processCall(Pabort.class, username, password ,x, x1, x2); 
			}
			
		}
	}
	
	public static class Pconfirm2 extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private SessionI<SessionType> x1;
		private SessionI<SessionType> x2;
		
		public Pconfirm2(String username, String password, SessionI<SessionType> x, SessionI<SessionType> x1, SessionI<SessionType> x2) {
			super(username, password);
			this.x=x;
			this.x1=x1;
			this.x2=x2;
		}
		
		@Override
		public void run() {
			try {
				logger.info("waiting on 'x2' for actions [confirm]");
				Message msg = x2.waitForReceive(Main.intPlaceholder*1000, "confirm"); //TODO: remove the placeholder/s
				
				logger.info("received [confirm]");
				processCall(Pcommit.class, username, password ,x, x1, x2); 
			}
			catch (TimeExpiredException e) {
				processCall(Pabort.class, username, password ,x, x1, x2); 
			}
			
		}
	}
	
	public static class Pcommit extends Participant {
		
		private static final long serialVersionUID = 1L;
		private SessionI<SessionType> x;
		private SessionI<SessionType> x1;
		private SessionI<SessionType> x2;
		
		public Pcommit(String username, String password, SessionI<SessionType> x, SessionI<SessionType> x1, SessionI<SessionType> x2) {
			super(username, password);
			this.x=x;
			this.x1=x1;
			this.x2=x2;
		}
		
		@Override
		public void run() {
			logger.info("sending action 'commit'");
			x.sendIfAllowed("commit"); 
			
			logger.info("sending action 'commit'");
			x1.sendIfAllowed("commit"); 
			
			logger.info("sending action 'commit'");
			x2.sendIfAllowed("commit"); 
		}
	}
	
	public static void main(String[] args) {
		HonestyChecker.isHonest(P.class, Main.username, Main.password);
		//new Thread(new P(Main.username, Main.password)).start();
	}
}
